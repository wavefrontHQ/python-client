# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The REST API enables you to interact with the Wavefront service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Wavefront REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import wavefront_api_client
from wavefront_api_client.api.dashboard_api import DashboardApi  # noqa: E501
from wavefront_api_client.rest import ApiException


class TestDashboardApi(unittest.TestCase):
    """DashboardApi unit test stubs"""

    def setUp(self):
        self.api = wavefront_api_client.api.dashboard_api.DashboardApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_dashboard_access(self):
        """Test case for add_dashboard_access

        Adds the specified ids to the given dashboards' ACL  # noqa: E501
        """
        pass

    def test_add_dashboard_tag(self):
        """Test case for add_dashboard_tag

        Add a tag to a specific dashboard  # noqa: E501
        """
        pass

    def test_create_dashboard(self):
        """Test case for create_dashboard

        Create a specific dashboard  # noqa: E501
        """
        pass

    def test_delete_dashboard(self):
        """Test case for delete_dashboard

        Delete a specific dashboard  # noqa: E501
        """
        pass

    def test_favorite_dashboard(self):
        """Test case for favorite_dashboard

        Mark a dashboard as favorite  # noqa: E501
        """
        pass

    def test_get_all_dashboard(self):
        """Test case for get_all_dashboard

        Get all dashboards for a customer  # noqa: E501
        """
        pass

    def test_get_dashboard(self):
        """Test case for get_dashboard

        Get a specific dashboard  # noqa: E501
        """
        pass

    def test_get_dashboard_access_control_list(self):
        """Test case for get_dashboard_access_control_list

        Get list of Access Control Lists for the specified dashboards  # noqa: E501
        """
        pass

    def test_get_dashboard_history(self):
        """Test case for get_dashboard_history

        Get the version history of a specific dashboard  # noqa: E501
        """
        pass

    def test_get_dashboard_tags(self):
        """Test case for get_dashboard_tags

        Get all tags associated with a specific dashboard  # noqa: E501
        """
        pass

    def test_get_dashboard_version(self):
        """Test case for get_dashboard_version

        Get a specific version of a specific dashboard  # noqa: E501
        """
        pass

    def test_remove_dashboard_access(self):
        """Test case for remove_dashboard_access

        Removes the specified ids from the given dashboards' ACL  # noqa: E501
        """
        pass

    def test_remove_dashboard_tag(self):
        """Test case for remove_dashboard_tag

        Remove a tag from a specific dashboard  # noqa: E501
        """
        pass

    def test_set_dashboard_acl(self):
        """Test case for set_dashboard_acl

        Set ACL for the specified dashboards  # noqa: E501
        """
        pass

    def test_set_dashboard_tags(self):
        """Test case for set_dashboard_tags

        Set all tags associated with a specific dashboard  # noqa: E501
        """
        pass

    def test_undelete_dashboard(self):
        """Test case for undelete_dashboard

        Undelete a specific dashboard  # noqa: E501
        """
        pass

    def test_unfavorite_dashboard(self):
        """Test case for unfavorite_dashboard

        Unmark a dashboard as favorite  # noqa: E501
        """
        pass

    def test_update_dashboard(self):
        """Test case for update_dashboard

        Update a specific dashboard  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
