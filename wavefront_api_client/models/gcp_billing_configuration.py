# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GCPBillingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'gcp_json_key': 'str',
        'gcp_api_key': 'str'
    }

    attribute_map = {
        'project_id': 'projectId',
        'gcp_json_key': 'gcpJsonKey',
        'gcp_api_key': 'gcpApiKey'
    }

    def __init__(self, project_id=None, gcp_json_key=None, gcp_api_key=None):  # noqa: E501
        """GCPBillingConfiguration - a model defined in Swagger"""  # noqa: E501

        self._project_id = None
        self._gcp_json_key = None
        self._gcp_api_key = None
        self.discriminator = None

        self.project_id = project_id
        self.gcp_json_key = gcp_json_key
        self.gcp_api_key = gcp_api_key

    @property
    def project_id(self):
        """Gets the project_id of this GCPBillingConfiguration.  # noqa: E501

        The Google Cloud Platform (GCP) project id.  # noqa: E501

        :return: The project_id of this GCPBillingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this GCPBillingConfiguration.

        The Google Cloud Platform (GCP) project id.  # noqa: E501

        :param project_id: The project_id of this GCPBillingConfiguration.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def gcp_json_key(self):
        """Gets the gcp_json_key of this GCPBillingConfiguration.  # noqa: E501

        Private key for a Google Cloud Platform (GCP) service account within your project.  The account must at least be granted Monitoring Viewer permissions.  This key must be in the JSON format generated by GCP. Use '{\"project_id\": \"%s\"}' to retain the existing key when updating.  # noqa: E501

        :return: The gcp_json_key of this GCPBillingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._gcp_json_key

    @gcp_json_key.setter
    def gcp_json_key(self, gcp_json_key):
        """Sets the gcp_json_key of this GCPBillingConfiguration.

        Private key for a Google Cloud Platform (GCP) service account within your project.  The account must at least be granted Monitoring Viewer permissions.  This key must be in the JSON format generated by GCP. Use '{\"project_id\": \"%s\"}' to retain the existing key when updating.  # noqa: E501

        :param gcp_json_key: The gcp_json_key of this GCPBillingConfiguration.  # noqa: E501
        :type: str
        """
        if gcp_json_key is None:
            raise ValueError("Invalid value for `gcp_json_key`, must not be `None`")  # noqa: E501

        self._gcp_json_key = gcp_json_key

    @property
    def gcp_api_key(self):
        """Gets the gcp_api_key of this GCPBillingConfiguration.  # noqa: E501

        API key for Google Cloud Platform (GCP). Use 'saved_api_key' to retain existing API key when updating  # noqa: E501

        :return: The gcp_api_key of this GCPBillingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._gcp_api_key

    @gcp_api_key.setter
    def gcp_api_key(self, gcp_api_key):
        """Sets the gcp_api_key of this GCPBillingConfiguration.

        API key for Google Cloud Platform (GCP). Use 'saved_api_key' to retain existing API key when updating  # noqa: E501

        :param gcp_api_key: The gcp_api_key of this GCPBillingConfiguration.  # noqa: E501
        :type: str
        """
        if gcp_api_key is None:
            raise ValueError("Invalid value for `gcp_api_key`, must not be `None`")  # noqa: E501

        self._gcp_api_key = gcp_api_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPBillingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
