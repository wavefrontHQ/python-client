# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.models.event import Event  # noqa: F401,E501


class Proxy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'customer_id': 'str',
        'hostname': 'str',
        'version': 'str',
        'status': 'str',
        'ephemeral': 'bool',
        'in_trash': 'bool',
        'last_check_in_time': 'int',
        'last_error_event': 'Event',
        'ssh_agent': 'bool',
        'last_error_time': 'int',
        'time_drift': 'int',
        'bytes_left_for_buffer': 'int',
        'bytes_per_minute_for_buffer': 'int',
        'local_queue_size': 'int',
        'last_known_error': 'str',
        'deleted': 'bool',
        'status_cause': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'customer_id': 'customerId',
        'hostname': 'hostname',
        'version': 'version',
        'status': 'status',
        'ephemeral': 'ephemeral',
        'in_trash': 'inTrash',
        'last_check_in_time': 'lastCheckInTime',
        'last_error_event': 'lastErrorEvent',
        'ssh_agent': 'sshAgent',
        'last_error_time': 'lastErrorTime',
        'time_drift': 'timeDrift',
        'bytes_left_for_buffer': 'bytesLeftForBuffer',
        'bytes_per_minute_for_buffer': 'bytesPerMinuteForBuffer',
        'local_queue_size': 'localQueueSize',
        'last_known_error': 'lastKnownError',
        'deleted': 'deleted',
        'status_cause': 'statusCause'
    }

    def __init__(self, name=None, id=None, customer_id=None, hostname=None, version=None, status=None, ephemeral=None, in_trash=None, last_check_in_time=None, last_error_event=None, ssh_agent=None, last_error_time=None, time_drift=None, bytes_left_for_buffer=None, bytes_per_minute_for_buffer=None, local_queue_size=None, last_known_error=None, deleted=None, status_cause=None):  # noqa: E501
        """Proxy - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._id = None
        self._customer_id = None
        self._hostname = None
        self._version = None
        self._status = None
        self._ephemeral = None
        self._in_trash = None
        self._last_check_in_time = None
        self._last_error_event = None
        self._ssh_agent = None
        self._last_error_time = None
        self._time_drift = None
        self._bytes_left_for_buffer = None
        self._bytes_per_minute_for_buffer = None
        self._local_queue_size = None
        self._last_known_error = None
        self._deleted = None
        self._status_cause = None
        self.discriminator = None

        self.name = name
        if id is not None:
            self.id = id
        if customer_id is not None:
            self.customer_id = customer_id
        if hostname is not None:
            self.hostname = hostname
        if version is not None:
            self.version = version
        if status is not None:
            self.status = status
        if ephemeral is not None:
            self.ephemeral = ephemeral
        if in_trash is not None:
            self.in_trash = in_trash
        if last_check_in_time is not None:
            self.last_check_in_time = last_check_in_time
        if last_error_event is not None:
            self.last_error_event = last_error_event
        if ssh_agent is not None:
            self.ssh_agent = ssh_agent
        if last_error_time is not None:
            self.last_error_time = last_error_time
        if time_drift is not None:
            self.time_drift = time_drift
        if bytes_left_for_buffer is not None:
            self.bytes_left_for_buffer = bytes_left_for_buffer
        if bytes_per_minute_for_buffer is not None:
            self.bytes_per_minute_for_buffer = bytes_per_minute_for_buffer
        if local_queue_size is not None:
            self.local_queue_size = local_queue_size
        if last_known_error is not None:
            self.last_known_error = last_known_error
        if deleted is not None:
            self.deleted = deleted
        if status_cause is not None:
            self.status_cause = status_cause

    @property
    def name(self):
        """Gets the name of this Proxy.  # noqa: E501

        Proxy name (modifiable)  # noqa: E501

        :return: The name of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Proxy.

        Proxy name (modifiable)  # noqa: E501

        :param name: The name of this Proxy.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this Proxy.  # noqa: E501


        :return: The id of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Proxy.


        :param id: The id of this Proxy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def customer_id(self):
        """Gets the customer_id of this Proxy.  # noqa: E501


        :return: The customer_id of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Proxy.


        :param customer_id: The customer_id of this Proxy.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def hostname(self):
        """Gets the hostname of this Proxy.  # noqa: E501

        Host name of the machine running the proxy  # noqa: E501

        :return: The hostname of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Proxy.

        Host name of the machine running the proxy  # noqa: E501

        :param hostname: The hostname of this Proxy.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def version(self):
        """Gets the version of this Proxy.  # noqa: E501


        :return: The version of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Proxy.


        :param version: The version of this Proxy.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def status(self):
        """Gets the status of this Proxy.  # noqa: E501

        the proxy's status  # noqa: E501

        :return: The status of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Proxy.

        the proxy's status  # noqa: E501

        :param status: The status of this Proxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "STOPPED_UNKNOWN", "STOPPED_BY_SERVER"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def ephemeral(self):
        """Gets the ephemeral of this Proxy.  # noqa: E501

        When true, this proxy is expected to be ephemeral (possibly hosted on a short-lived container) and will be deleted after a period of inactivity (not checking in)  # noqa: E501

        :return: The ephemeral of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._ephemeral

    @ephemeral.setter
    def ephemeral(self, ephemeral):
        """Sets the ephemeral of this Proxy.

        When true, this proxy is expected to be ephemeral (possibly hosted on a short-lived container) and will be deleted after a period of inactivity (not checking in)  # noqa: E501

        :param ephemeral: The ephemeral of this Proxy.  # noqa: E501
        :type: bool
        """

        self._ephemeral = ephemeral

    @property
    def in_trash(self):
        """Gets the in_trash of this Proxy.  # noqa: E501


        :return: The in_trash of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._in_trash

    @in_trash.setter
    def in_trash(self, in_trash):
        """Sets the in_trash of this Proxy.


        :param in_trash: The in_trash of this Proxy.  # noqa: E501
        :type: bool
        """

        self._in_trash = in_trash

    @property
    def last_check_in_time(self):
        """Gets the last_check_in_time of this Proxy.  # noqa: E501

        Last time when this proxy checked in (in milliseconds since the unix epoch)  # noqa: E501

        :return: The last_check_in_time of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._last_check_in_time

    @last_check_in_time.setter
    def last_check_in_time(self, last_check_in_time):
        """Sets the last_check_in_time of this Proxy.

        Last time when this proxy checked in (in milliseconds since the unix epoch)  # noqa: E501

        :param last_check_in_time: The last_check_in_time of this Proxy.  # noqa: E501
        :type: int
        """

        self._last_check_in_time = last_check_in_time

    @property
    def last_error_event(self):
        """Gets the last_error_event of this Proxy.  # noqa: E501


        :return: The last_error_event of this Proxy.  # noqa: E501
        :rtype: Event
        """
        return self._last_error_event

    @last_error_event.setter
    def last_error_event(self, last_error_event):
        """Sets the last_error_event of this Proxy.


        :param last_error_event: The last_error_event of this Proxy.  # noqa: E501
        :type: Event
        """

        self._last_error_event = last_error_event

    @property
    def ssh_agent(self):
        """Gets the ssh_agent of this Proxy.  # noqa: E501

        deprecated  # noqa: E501

        :return: The ssh_agent of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._ssh_agent

    @ssh_agent.setter
    def ssh_agent(self, ssh_agent):
        """Sets the ssh_agent of this Proxy.

        deprecated  # noqa: E501

        :param ssh_agent: The ssh_agent of this Proxy.  # noqa: E501
        :type: bool
        """

        self._ssh_agent = ssh_agent

    @property
    def last_error_time(self):
        """Gets the last_error_time of this Proxy.  # noqa: E501

        deprecated  # noqa: E501

        :return: The last_error_time of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._last_error_time

    @last_error_time.setter
    def last_error_time(self, last_error_time):
        """Sets the last_error_time of this Proxy.

        deprecated  # noqa: E501

        :param last_error_time: The last_error_time of this Proxy.  # noqa: E501
        :type: int
        """

        self._last_error_time = last_error_time

    @property
    def time_drift(self):
        """Gets the time_drift of this Proxy.  # noqa: E501

        Time drift of the proxy's clock compared to Wavefront servers  # noqa: E501

        :return: The time_drift of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._time_drift

    @time_drift.setter
    def time_drift(self, time_drift):
        """Sets the time_drift of this Proxy.

        Time drift of the proxy's clock compared to Wavefront servers  # noqa: E501

        :param time_drift: The time_drift of this Proxy.  # noqa: E501
        :type: int
        """

        self._time_drift = time_drift

    @property
    def bytes_left_for_buffer(self):
        """Gets the bytes_left_for_buffer of this Proxy.  # noqa: E501

        Number of bytes of space remaining in the persistent disk queue of this proxy  # noqa: E501

        :return: The bytes_left_for_buffer of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._bytes_left_for_buffer

    @bytes_left_for_buffer.setter
    def bytes_left_for_buffer(self, bytes_left_for_buffer):
        """Sets the bytes_left_for_buffer of this Proxy.

        Number of bytes of space remaining in the persistent disk queue of this proxy  # noqa: E501

        :param bytes_left_for_buffer: The bytes_left_for_buffer of this Proxy.  # noqa: E501
        :type: int
        """

        self._bytes_left_for_buffer = bytes_left_for_buffer

    @property
    def bytes_per_minute_for_buffer(self):
        """Gets the bytes_per_minute_for_buffer of this Proxy.  # noqa: E501

        Bytes used per minute by the persistent disk queue of this proxy  # noqa: E501

        :return: The bytes_per_minute_for_buffer of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._bytes_per_minute_for_buffer

    @bytes_per_minute_for_buffer.setter
    def bytes_per_minute_for_buffer(self, bytes_per_minute_for_buffer):
        """Sets the bytes_per_minute_for_buffer of this Proxy.

        Bytes used per minute by the persistent disk queue of this proxy  # noqa: E501

        :param bytes_per_minute_for_buffer: The bytes_per_minute_for_buffer of this Proxy.  # noqa: E501
        :type: int
        """

        self._bytes_per_minute_for_buffer = bytes_per_minute_for_buffer

    @property
    def local_queue_size(self):
        """Gets the local_queue_size of this Proxy.  # noqa: E501

        Number of items in the persistent disk queue of this proxy  # noqa: E501

        :return: The local_queue_size of this Proxy.  # noqa: E501
        :rtype: int
        """
        return self._local_queue_size

    @local_queue_size.setter
    def local_queue_size(self, local_queue_size):
        """Sets the local_queue_size of this Proxy.

        Number of items in the persistent disk queue of this proxy  # noqa: E501

        :param local_queue_size: The local_queue_size of this Proxy.  # noqa: E501
        :type: int
        """

        self._local_queue_size = local_queue_size

    @property
    def last_known_error(self):
        """Gets the last_known_error of this Proxy.  # noqa: E501

        deprecated  # noqa: E501

        :return: The last_known_error of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._last_known_error

    @last_known_error.setter
    def last_known_error(self, last_known_error):
        """Sets the last_known_error of this Proxy.

        deprecated  # noqa: E501

        :param last_known_error: The last_known_error of this Proxy.  # noqa: E501
        :type: str
        """

        self._last_known_error = last_known_error

    @property
    def deleted(self):
        """Gets the deleted of this Proxy.  # noqa: E501


        :return: The deleted of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Proxy.


        :param deleted: The deleted of this Proxy.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def status_cause(self):
        """Gets the status_cause of this Proxy.  # noqa: E501

        The reason why the proxy is in current status  # noqa: E501

        :return: The status_cause of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._status_cause

    @status_cause.setter
    def status_cause(self, status_cause):
        """Sets the status_cause of this Proxy.

        The reason why the proxy is in current status  # noqa: E501

        :param status_cause: The status_cause of this Proxy.  # noqa: E501
        :type: str
        """

        self._status_cause = status_cause

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Proxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
