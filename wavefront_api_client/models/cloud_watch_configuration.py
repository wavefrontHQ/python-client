# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.models.aws_base_credentials import AWSBaseCredentials  # noqa: F401,E501


class CloudWatchConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_credentials': 'AWSBaseCredentials',
        'metric_filter_regex': 'str',
        'instance_selection_tags': 'dict(str, str)',
        'volume_selection_tags': 'dict(str, str)',
        'point_tag_filter_regex': 'str',
        'namespaces': 'list[str]'
    }

    attribute_map = {
        'base_credentials': 'baseCredentials',
        'metric_filter_regex': 'metricFilterRegex',
        'instance_selection_tags': 'instanceSelectionTags',
        'volume_selection_tags': 'volumeSelectionTags',
        'point_tag_filter_regex': 'pointTagFilterRegex',
        'namespaces': 'namespaces'
    }

    def __init__(self, base_credentials=None, metric_filter_regex=None, instance_selection_tags=None, volume_selection_tags=None, point_tag_filter_regex=None, namespaces=None):  # noqa: E501
        """CloudWatchConfiguration - a model defined in Swagger"""  # noqa: E501

        self._base_credentials = None
        self._metric_filter_regex = None
        self._instance_selection_tags = None
        self._volume_selection_tags = None
        self._point_tag_filter_regex = None
        self._namespaces = None
        self.discriminator = None

        if base_credentials is not None:
            self.base_credentials = base_credentials
        if metric_filter_regex is not None:
            self.metric_filter_regex = metric_filter_regex
        if instance_selection_tags is not None:
            self.instance_selection_tags = instance_selection_tags
        if volume_selection_tags is not None:
            self.volume_selection_tags = volume_selection_tags
        if point_tag_filter_regex is not None:
            self.point_tag_filter_regex = point_tag_filter_regex
        if namespaces is not None:
            self.namespaces = namespaces

    @property
    def base_credentials(self):
        """Gets the base_credentials of this CloudWatchConfiguration.  # noqa: E501


        :return: The base_credentials of this CloudWatchConfiguration.  # noqa: E501
        :rtype: AWSBaseCredentials
        """
        return self._base_credentials

    @base_credentials.setter
    def base_credentials(self, base_credentials):
        """Sets the base_credentials of this CloudWatchConfiguration.


        :param base_credentials: The base_credentials of this CloudWatchConfiguration.  # noqa: E501
        :type: AWSBaseCredentials
        """

        self._base_credentials = base_credentials

    @property
    def metric_filter_regex(self):
        """Gets the metric_filter_regex of this CloudWatchConfiguration.  # noqa: E501

        A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested  # noqa: E501

        :return: The metric_filter_regex of this CloudWatchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._metric_filter_regex

    @metric_filter_regex.setter
    def metric_filter_regex(self, metric_filter_regex):
        """Sets the metric_filter_regex of this CloudWatchConfiguration.

        A regular expression that a CloudWatch metric name must match (case-insensitively) in order to be ingested  # noqa: E501

        :param metric_filter_regex: The metric_filter_regex of this CloudWatchConfiguration.  # noqa: E501
        :type: str
        """

        self._metric_filter_regex = metric_filter_regex

    @property
    def instance_selection_tags(self):
        """Gets the instance_selection_tags of this CloudWatchConfiguration.  # noqa: E501

        A comma-separated white list of AWS instance tag-value pairs (in AWS).  If the instance's AWS tags match this whitelist, CloudWatch data about this instance is ingested.  Multiple entries are OR'ed  # noqa: E501

        :return: The instance_selection_tags of this CloudWatchConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._instance_selection_tags

    @instance_selection_tags.setter
    def instance_selection_tags(self, instance_selection_tags):
        """Sets the instance_selection_tags of this CloudWatchConfiguration.

        A comma-separated white list of AWS instance tag-value pairs (in AWS).  If the instance's AWS tags match this whitelist, CloudWatch data about this instance is ingested.  Multiple entries are OR'ed  # noqa: E501

        :param instance_selection_tags: The instance_selection_tags of this CloudWatchConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._instance_selection_tags = instance_selection_tags

    @property
    def volume_selection_tags(self):
        """Gets the volume_selection_tags of this CloudWatchConfiguration.  # noqa: E501

        A comma-separated white list of AWS volume tag-value pairs (in AWS).  If the volume's AWS tags match this whitelist, CloudWatch data about this volume is ingested.  Multiple entries are OR'ed  # noqa: E501

        :return: The volume_selection_tags of this CloudWatchConfiguration.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._volume_selection_tags

    @volume_selection_tags.setter
    def volume_selection_tags(self, volume_selection_tags):
        """Sets the volume_selection_tags of this CloudWatchConfiguration.

        A comma-separated white list of AWS volume tag-value pairs (in AWS).  If the volume's AWS tags match this whitelist, CloudWatch data about this volume is ingested.  Multiple entries are OR'ed  # noqa: E501

        :param volume_selection_tags: The volume_selection_tags of this CloudWatchConfiguration.  # noqa: E501
        :type: dict(str, str)
        """

        self._volume_selection_tags = volume_selection_tags

    @property
    def point_tag_filter_regex(self):
        """Gets the point_tag_filter_regex of this CloudWatchConfiguration.  # noqa: E501

        A regular expression that AWS tag key name must match (case-insensitively) in order to be ingested  # noqa: E501

        :return: The point_tag_filter_regex of this CloudWatchConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._point_tag_filter_regex

    @point_tag_filter_regex.setter
    def point_tag_filter_regex(self, point_tag_filter_regex):
        """Sets the point_tag_filter_regex of this CloudWatchConfiguration.

        A regular expression that AWS tag key name must match (case-insensitively) in order to be ingested  # noqa: E501

        :param point_tag_filter_regex: The point_tag_filter_regex of this CloudWatchConfiguration.  # noqa: E501
        :type: str
        """

        self._point_tag_filter_regex = point_tag_filter_regex

    @property
    def namespaces(self):
        """Gets the namespaces of this CloudWatchConfiguration.  # noqa: E501

        A list of namespace that limit what we query from CloudWatch.  # noqa: E501

        :return: The namespaces of this CloudWatchConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this CloudWatchConfiguration.

        A list of namespace that limit what we query from CloudWatch.  # noqa: E501

        :param namespaces: The namespaces of this CloudWatchConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._namespaces = namespaces

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudWatchConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
