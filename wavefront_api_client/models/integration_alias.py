# coding: utf-8

"""
    Wavefront Public API

    <p>The Wavefront public API enables you to interact with Wavefront servers using standard web service API tools. You can use the API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make API calls outside the Wavefront API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p><p>For legacy versions of the Wavefront API, see the <a href=\"/api-docs/ui/deprecated\">legacy API documentation</a>.</p>  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IntegrationAlias(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'description': 'str',
        'base_url': 'str',
        'icon': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'description': 'description',
        'base_url': 'baseUrl',
        'icon': 'icon'
    }

    def __init__(self, name=None, id=None, description=None, base_url=None, icon=None):  # noqa: E501
        """IntegrationAlias - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._id = None
        self._description = None
        self._base_url = None
        self._icon = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if base_url is not None:
            self.base_url = base_url
        if icon is not None:
            self.icon = icon

    @property
    def name(self):
        """Gets the name of this IntegrationAlias.  # noqa: E501

        Name of the alias Integration  # noqa: E501

        :return: The name of this IntegrationAlias.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegrationAlias.

        Name of the alias Integration  # noqa: E501

        :param name: The name of this IntegrationAlias.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this IntegrationAlias.  # noqa: E501

        ID of the alias Integration  # noqa: E501

        :return: The id of this IntegrationAlias.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegrationAlias.

        ID of the alias Integration  # noqa: E501

        :param id: The id of this IntegrationAlias.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this IntegrationAlias.  # noqa: E501

        Description of the alias Integration  # noqa: E501

        :return: The description of this IntegrationAlias.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IntegrationAlias.

        Description of the alias Integration  # noqa: E501

        :param description: The description of this IntegrationAlias.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def base_url(self):
        """Gets the base_url of this IntegrationAlias.  # noqa: E501

        Base URL of this alias Integration  # noqa: E501

        :return: The base_url of this IntegrationAlias.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this IntegrationAlias.

        Base URL of this alias Integration  # noqa: E501

        :param base_url: The base_url of this IntegrationAlias.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def icon(self):
        """Gets the icon of this IntegrationAlias.  # noqa: E501

        Icon path of the alias Integration  # noqa: E501

        :return: The icon of this IntegrationAlias.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this IntegrationAlias.

        Icon path of the alias Integration  # noqa: E501

        :param icon: The icon of this IntegrationAlias.  # noqa: E501
        :type: str
        """

        self._icon = icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationAlias):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
